//
// NamedPipeImpl_WIN32U.cpp
//
// $Id: //poco/1.4/Foundation/src/NamedPipeImpl_WIN32U.cpp#2 $
//
// Library: Foundation
// Package: Processes
// Module:  NamedPipeImpl
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/NamedPipeImpl_WIN32U.h"
#include "Poco/Exception.h"
#include "Poco/UnicodeConverter.h"


namespace Poco {


NamedPipeImpl::NamedPipeImpl(const Path& path):
	_path(path.absolute())
{
	std::wstring upath;
	UnicodeConverter::toUTF16(_path.toString(), upath);

	SECURITY_ATTRIBUTES attr;
	attr.nLength              = sizeof(attr);
	attr.lpSecurityDescriptor = NULL;
	attr.bInheritHandle       = FALSE;
	_readHandle = CreateNamedPipeW(
			upath.c_str(),
			PIPE_ACCESS_DUPLEX, 
			PIPE_TYPE_BYTE | PIPE_READMODE_BYTE, 
			PIPE_UNLIMITED_INSTANCES,
			1024,
			1024,
			NMPWAIT_USE_DEFAULT_WAIT,
			&attr);

	if (_readHandle == INVALID_HANDLE_VALUE)
		throw CreateFileException("named pipe");

	DuplicateHandle(
			GetCurrentProcess(),
			_readHandle,
			GetCurrentProcess(),
			&_writeHandle,
			0, 
			FALSE,
			DUPLICATE_SAME_ACCESS);

}

NamedPipeImpl::NamedPipeImpl(const Path& path, bool clienttag):
	_path(path.absolute())
{
	std::wstring upath;
	UnicodeConverter::toUTF16(_path.toString(), upath);
	
	SECURITY_ATTRIBUTES attr;
	attr.nLength              = sizeof(attr);
	attr.lpSecurityDescriptor = NULL;
	attr.bInheritHandle       = FALSE;

	_readHandle = CreateFileW(
		upath.c_str(), 
		GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		&attr,
		OPEN_EXISTING,
		0,
		NULL
		);

	if (_readHandle == INVALID_HANDLE_VALUE)
		throw OpenFileException("named pipe", GetLastError());

	DuplicateHandle(
		GetCurrentProcess(),
		_readHandle,
		GetCurrentProcess(),
		&_writeHandle,
		0, 
		FALSE,
		DUPLICATE_SAME_ACCESS);
}

NamedPipeImpl::~NamedPipeImpl()
{
	closeRead();
	closeWrite();
}


int NamedPipeImpl::writeBytes(const void* buffer, int length)
{
	poco_assert (_writeHandle != INVALID_HANDLE_VALUE);

	DWORD bytesWritten = 0;
	DWORD bytesRead = 0;
	BOOL ok;
	DWORD err = 0;
	do 
	{
		ok = WriteFile(_writeHandle, buffer, length, &bytesWritten, NULL);
	} while (!ok && ((err = GetLastError()) == ERROR_PIPE_BUSY));

	if (!ok)
		throw WriteFileException("named pipe", err);

	return bytesWritten;
}


int NamedPipeImpl::readBytes(void* buffer, int length)
{
	poco_assert (_readHandle != INVALID_HANDLE_VALUE);

	DWORD bytesRead = 0;
	BOOL ok = ReadFile(_readHandle, buffer, length, &bytesRead, NULL);
	DWORD err = 0;
	if (ok || ((err = GetLastError()) == ERROR_BROKEN_PIPE) || (err == ERROR_PIPE_LISTENING) || (err == ERROR_NO_DATA))
		return bytesRead;
	else
		throw ReadFileException("named pipe", err);
}


NamedPipeImpl::Handle NamedPipeImpl::readHandle() const
{
	return _readHandle;
}


NamedPipeImpl::Handle NamedPipeImpl::writeHandle() const
{
	return _writeHandle;
}


void NamedPipeImpl::closeRead()
{
	if (_readHandle != INVALID_HANDLE_VALUE)
	{
		CloseHandle(_readHandle);
		_readHandle = INVALID_HANDLE_VALUE;
	}
}


void NamedPipeImpl::closeWrite()
{
	if (_writeHandle != INVALID_HANDLE_VALUE)
	{
		CloseHandle(_writeHandle);
		_writeHandle = INVALID_HANDLE_VALUE;
	}
}


} // namespace Poco
