//
// NamedPipe.cpp
//
// $Id: //poco/1.4/Foundation/src/NamedPipe.cpp#2 $
//
// Library: Foundation
// Package: Processes
// Module:  NamedPipe
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/NamedPipe.h"


namespace Poco {


	NamedPipe::NamedPipe(const Path& path):
	_pImpl(new NamedPipeImpl(path))
{
}

	NamedPipe::NamedPipe(const Path& path, bool clienttag):
	_pImpl(new NamedPipeImpl(path, clienttag))
{
}
	
NamedPipe::NamedPipe(const NamedPipe& pipe):
	_pImpl(pipe._pImpl)
{
	_pImpl->duplicate();
}


NamedPipe::~NamedPipe()
{
	_pImpl->release();
}


NamedPipe& NamedPipe::operator = (const NamedPipe& pipe)
{
	if (this != &pipe)
	{
		_pImpl->release();
		_pImpl = pipe._pImpl;
		_pImpl->duplicate();
	}
	return *this;
}


void NamedPipe::close(CloseMode mode)
{
	switch (mode)
	{
	case CLOSE_READ:
		_pImpl->closeRead();
		break;
	case CLOSE_WRITE:
		_pImpl->closeWrite();
		break;
	default:
		_pImpl->closeRead();
		_pImpl->closeWrite();
		break;
	}
}


} // namespace Poco
