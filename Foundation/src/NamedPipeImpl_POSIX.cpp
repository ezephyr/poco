//
// NamedPipeImpl_POSIX.cpp
//
// $Id: //poco/1.4/Foundation/src/NamedPipeImpl_POSIX.cpp#2 $
//
// Library: Foundation
// Package: Processes
// Module:  NamedPipeImpl
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/NamedPipeImpl_POSIX.h"
#include "Poco/Exception.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>


namespace Poco {


NamedPipeImpl::NamedPipeImpl(const Path& path)
{
	_path = path.toString();
	if (mkfifo(_path.c_str(), S_IWUSR | S_IRUSR | S_IWGRP | S_IRGRP) != 0)
		CreateFileException("named pipe", errno);

	_readfd = open(_path.c_str(), O_RDONLY);
	_writefd = -1;
	if (_readfd == -1)
		throw OpenFileException("named pipe", errno);

}


NamedPipeImpl::NamedPipeImpl(const Path& path, bool clienttag)
{
	_path = path.toString();
	_writefd = open(_path.c_str(), O_RDONLY);
	_readfd = -1;
	if (_writefd == -1)
		throw OpenFileException("named pipe", errno);
}


NamedPipeImpl::~NamedPipeImpl()
{
	closeRead();
	closeWrite();
}


int NamedPipeImpl::writeBytes(const void* buffer, int length)
{
	poco_assert (_writefd != -1);

	int n;
	do
	{
		n = write(_writefd, buffer, length);
	}
	while (n < 0 && errno == EINTR);
	if (n >= 0)
		return n;
	else
		throw WriteFileException("named pipe");
}


int NamedPipeImpl::readBytes(void* buffer, int length)
{
	poco_assert (_readfd != -1);

	int n;
	do
	{
		n = read(_readfd, buffer, length);
	}
	while (n < 0 && errno == EINTR);
	if (n >= 0)
		return n;
	else
		throw ReadFileException("named pipe");
}


NamedPipeImpl::Handle NamedPipeImpl::readHandle() const
{
	return _readfd;
}


NamedPipeImpl::Handle NamedPipeImpl::writeHandle() const
{
	return _writefd;
}


void NamedPipeImpl::closeRead()
{
	if (_readfd != -1)
	{
		close(_readfd);
		_readfd = -1;
		remove(_path.c_str());
	}
}


void NamedPipeImpl::closeWrite()
{
	if (_writefd != -1)
	{
		close(_writefd);
		_writefd = -1;
	}
}


} // namespace Poco
